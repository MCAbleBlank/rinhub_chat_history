let isIdentitySwapped = false;

async function loadChatHistory(filename) {
    try {
        const response = await fetch(`history/${filename}`);
        const data = await response.json();
        renderChat(data);
    } catch (error) {
        console.error('失败:', error);
        document.querySelector('.chat-header h2').textContent = '出错啦{{{(>_<)}}}';
    }
}

function renderChat(data) {
    // 更新标题和日期
    document.querySelector('.chat-header h2').textContent = data.title;
    document.querySelector('.chat-info').textContent = data.date;
    
    const messagesContainer = document.querySelector('.chat-messages');
    messagesContainer.innerHTML = ''; // 清空现有内容
    
    // 处理消息
    data.messages.forEach((msg, index) => {
        const prevMsg = index > 0 ? data.messages[index - 1] : null;
        const nextMsg = index < data.messages.length - 1 ? data.messages[index + 1] : null;
        
        // 如果身份被交换，则交换消息类型
        const messageType = isIdentitySwapped ? 
            (msg.type === 'sent' ? 'received' : 'sent') : 
            msg.type;
        
        // 确定消息位置（first/middle/last/single）
        let position = 'single';
        if (prevMsg && nextMsg && messageType === (isIdentitySwapped ? (prevMsg.type === 'sent' ? 'received' : 'sent') : prevMsg.type) 
            && messageType === (isIdentitySwapped ? (nextMsg.type === 'sent' ? 'received' : 'sent') : nextMsg.type)) {
            position = 'middle';
        } else if (nextMsg && messageType === (isIdentitySwapped ? (nextMsg.type === 'sent' ? 'received' : 'sent') : nextMsg.type)) {
            position = 'first';
        } else if (prevMsg && messageType === (isIdentitySwapped ? (prevMsg.type === 'sent' ? 'received' : 'sent') : prevMsg.type)) {
            position = 'last';
        }
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${messageType} ${position}`;
        
        let messageHTML = '';
        
        // 根据交换状态选择正确的头像
        const avatarUrl = messageType === 'received' ? 
            (isIdentitySwapped ? data.avatar_send : data.avatar_receive) : 
            (isIdentitySwapped ? data.avatar_receive : data.avatar_send);
        
        if (messageType === 'received' && (position === 'first' || position === 'single')) {
            messageHTML += `
                <div class="avatar">
                    <img src="${avatarUrl}" alt="头像">
                </div>
            `;
        }
        
        messageHTML += `
            <div class="message-content">
                ${(position === 'first' || position === 'single') && messageType === 'received' ? 
                  `<div class="sender">${isIdentitySwapped ? data.sender_name : data.receiver_name}</div>` : ''}
                <div class="text-container">
                    <div class="text">${msg.text}</div>
                </div>
                <div class="message-time">${msg.time}</div>
            </div>
        `;
        
        messageDiv.innerHTML = messageHTML;
        messagesContainer.appendChild(messageDiv);
    });
}

// 添加切换身份按钮的事件监听器
document.addEventListener('DOMContentLoaded', () => {
    const switchBtn = document.getElementById('switchIdentity');
    switchBtn.addEventListener('click', () => {
        isIdentitySwapped = !isIdentitySwapped;
        const urlParams = new URLSearchParams(window.location.search);
        const historyFile = urlParams.get('history') || 'history20250206.json';
        loadChatHistory(historyFile);
    });
});

// 初始加载
const urlParams = new URLSearchParams(window.location.search);
const historyFile = urlParams.get('history') || 'test.json';
loadChatHistory(historyFile); 